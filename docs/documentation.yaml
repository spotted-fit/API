openapi: 3.0.1
info:
  title: Spotted API
  version: 1.0.1

paths:
  /register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                username: { type: string }
              required: [email, password, username]
      responses:
        '200':
          description: Registration result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: object
                    properties:
                      token: { type: string }

  /login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
                username: { type: string }
              required: [email, password, username]
      responses:
        '200':
          description: Login result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: object
                    properties:
                      token: { type: string }

  /posts:
    post:
      summary: Create a post
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo1: { type: string, format: binary }
                photo2: { type: string, format: binary }
                emoji: { type: string }
                description: { type: string }
              required: [photo1, photo2]
      responses:
        '200':
          description: Post creation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'

  /posts/{id}:
    get:
      summary: Get post by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Post retrieval result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: object
                    properties:
                      id: { type: integer }
                      userId: { type: integer }
                      photo1: { type: string }
                      photo2: { type: string, nullable: true }
                      text: { type: string, nullable: true }
                      emoji: { type: string, nullable: true }
                      createdAt: { type: integer }
                      likes: { type: integer }
                      isLikedByMe: { type: boolean }
                      comments:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            userId: { type: integer }
                            text: { type: string }
                            createdAt: { type: integer }

  /posts/{id}/like:
    post:
      summary: Like a post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Like post result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'

    delete:
      summary: Remove like from post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Remove like result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'

  /posts/{id}/comment:
    post:
      summary: Add comment to post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text: { type: string }
              required: [text]
      responses:
        '200':
          description: Add comment result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'

  /posts/{id}/comments:
    get:
      summary: Get comments for post
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Comments list result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        userId: { type: integer }
                        text: { type: string }
                        createdAt: { type: integer }

  /profile/{id}:
    get:
      summary: Get user profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Profile retrieval result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: object
                    properties:
                      id: { type: integer }
                      username: { type: string }
                      avatar: { type: string, nullable: true }
                      friendsCount: { type: integer }
                      posts:
                        type: array
                        items:
                          type: object
                          properties:
                            id: { type: integer }
                            photo1: { type: string }
                            photo2: { type: string, nullable: true }
                            text: { type: string, nullable: true }
                            emoji: { type: string, nullable: true }
                            createdAt: { type: integer }
                            likes: { type: integer }
                            isLikedByMe: { type: boolean }

  /profile/{id}/posts:
    get:
      summary: Get posts of a specific user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User posts retrieval result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        postId: { type: integer }
                        photo1: { type: string }
                        photo2: { type: string }
                        text: { type: string }
                        emoji: { type: string }
                        createdAt: { type: string, format: date-time }

  /search:
    get:
      summary: Search users by username
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search users result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        username: { type: string }
                        avatar: { type: string, nullable: true }
  /friends/request:
    post:
      summary: Send a friend request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                toId:
                  type: integer
              required: [ toId ]
      responses:
        '200':
          description: Send friend request result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: object

  /friends/respond:
    post:
      summary: Respond to a friend request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                requestId:
                  type: integer
                accepted:
                  type: boolean
              required: [ requestId, accepted ]
      responses:
        '200':
          description: Respond to friend request result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: object
                    properties:
                      response:
                        type: string
                        example: "accepted"

  /friends/requests:
    get:
      summary: Get incoming friend requests
      responses:
        '200':
          description: Get incoming requests result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        username: { type: string }

  /friends:
    get:
      summary: Get list of friends
      responses:
        '200':
          description: Get friends list result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: integer }
                        username: { type: string }

  /feed:
    get:
      summary: Get recent posts from friends
      responses:
        '200':
          description: Friends posts feed result
          content:
            application/json:
              schema:
                type: object
                properties:
                  result: { type: string, example: "ok" }
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        postId: { type: integer }
                        photo1: { type: string }
                        photo2: { type: string }
                        text: { type: string }
                        emoji: { type: string }
                        createdAt: { type: string, format: date-time }

components:
  schemas:
    OkResponse:
      type: object
      properties:
        result:
          type: string
          example: "ok"
        response:
          type: object
    ErrorResponse:
      type: object
      properties:
        result:
          type: string
          example: "error"
        message:
          type: string
